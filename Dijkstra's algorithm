#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

// Function to implement Dijkstra's Algorithm
void dijkstra(int src, const vector<vector<pair<int, int>>> &graph, int V) {
    // Min-heap priority queue to store (distance, vertex)
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    // Vector to store the shortest distances from the source to each vertex
    vector<int> dist(V, INT_MAX);

    // Initialize the source distance as 0
    dist[src] = 0;
    pq.push({0, src});

    while (!pq.empty()) {
        int u = pq.top().second; // Current vertex
        int d = pq.top().first;  // Current distance
        pq.pop();

        // Process neighbors of the current vertex
        for (const auto &neighbor : graph[u]) {
            int v = neighbor.first;  // Neighbor vertex
            int weight = neighbor.second; // Edge weight

            // If a shorter path to v is found
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push({dist[v], v});
            }
        }
    }

    // Print shortest distances
    cout << "Vertex\tDistance from Source\n";
    for (int i = 0; i < V; i++) {
        cout << i << "\t" << dist[i] << "\n";
    }
}

int main() {
    int V = 5; // Number of vertices
    vector<vector<pair<int, int>>> graph(V);

    // Add edges (u, v, weight)
    graph[0].push_back({1, 2});
    graph[0].push_back({4, 1});
    graph[1].push_back({2, 3});
    graph[4].push_back({1, 2});
    graph[4].push_back({3, 5});
    graph[2].push_back({3, 1});

    int source = 0; // Source vertex
    dijkstra(source, graph, V);

    return 0;
}
